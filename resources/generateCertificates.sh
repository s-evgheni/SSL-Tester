#!/bin/bash

<<COMMENT1

NOTES:

The following script will generate cryptography material necessary for 2 way authentication.
############################
Certificate Authority (CA) component files:
Those files will be used to sign client and server certificate requests from client and server in order to establish trust between those entities.

ca.key - Private key for the CA (We will use those files to sign certificates from client and server)
ca.crt - Public key for the CA
############################
Server component files:
Those files will be used by server to provide identity information about itself to the client

server.key - Private key for the server
server.csr - Certificate request for the server (used by the CA when creating the server public key)
server.crt - Public key for the server
serverkeystore.jks - java keystore which will have a copy of server.key and server.crt in it, for usage with Tomcat or simmilar java based server

############################
Client component files:
Those files will be used by the browser or another client (java) to provide identity to the server.

client.key - Private key for the client
client.csr - Certificate request for the client (used by the CA when creating the client public key)
client.crt - Public key for the client

############################
Java trust store component files:

This is our store of certificates that should be trusted.
It should be used by the web server or java client to validate whether the certificate for the other side of the link can be used to communicate.
By using a common CA root certificate, we can create and use a single truststore on both the web server and java client.

truststore.jks - java trust store which both server and client will trust.

Script usage:
0. Run this script and then go to certs folder generated by it :)
1. Import the CA root certificate (ca.crt) into your browser of choise as Trusted Authority
2. Import client certificate (client.p12) into your browser of choice as User Certificate
3. Configure your server to use trustore.jks in order to validate client certificate with a password specified in the PASSWORD variable below
4. Configure your server to use server.p12 OR serverkeystore.jks (for Java based servers) with a password specified in the PASSWORD variable below.
5. Start server and point your browser to any https page.
6. If prompted, choice client certificate imported in step 2 from a list of available options
7. You should be able to see requested HTTPS page.

COMMENT1

# default password for keys
PASSWORD=P@ssw0rd
 
OUT_DIR=certs
 
# Subject items
C="CA"
ST="AB"
L="Calgary"
O="StrataHealth"
 
CN_CA="My Demo CA"
CN_SERVER="localhost"
CN_SERVER_KEY_ALIAS="tomcatkey"
CN_CLIENT="Strata User"
 
###############################

function checkIfDirectoryExist {
    if [ -d "$1" ]
    then
        echo -e "\nError. Script must be executed with admin rights";
        echo  "Please use sudo command and try again!";
        echo  "Terminating execution prematurely... ";
        exit;
    fi
}

if [ -d "$OUT_DIR" ]; then
    echo -e "\nFound existing directory at specified location";
    echo "Removing directory at specified location ...";
    rm -r ${OUT_DIR};
    # check if successful, terminate script in case of failure:
    checkIfDirectoryExist "$OUT_DIR"
fi
 
# Create output directory
mkdir -p ${OUT_DIR}
 
###############################
 
# create CA key
openssl genrsa -des3 -out ${OUT_DIR}/ca.key -passout pass:$PASSWORD 4096
 
# create CA cert
openssl req -new -sha256 -x509 -days 3650 -key ${OUT_DIR}/ca.key -out ${OUT_DIR}/ca.crt \
 -passin pass:$PASSWORD -subj "/C=${C}/ST=${ST}/L=${L}/O=${O}/CN=${CN_CA}/"
 
# create truststore
keytool -import -trustcacerts -alias caroot -file ${OUT_DIR}/ca.crt \
 -keystore ${OUT_DIR}/truststore.jks -storepass ${PASSWORD} -noprompt
 
###############################
 
# create server key
openssl genrsa -des3 -out ${OUT_DIR}/server.key -passout pass:$PASSWORD 4096
 
# create server cert request
openssl req -new -sha256 -key ${OUT_DIR}/server.key -out ${OUT_DIR}/server.csr \
 -passin pass:$PASSWORD -subj "/C=${C}/ST=${ST}/L=${L}/O=${O}/CN=${CN_SERVER}/"
 
# create server cert
openssl x509 -req -days 365 -in ${OUT_DIR}/server.csr -CA ${OUT_DIR}/ca.crt \
 -CAkey ${OUT_DIR}/ca.key -set_serial 02 -out ${OUT_DIR}/server.crt \
 -passin pass:${PASSWORD}
 
# convert server cert to PKCS12 format, including key
openssl pkcs12 -export \
 -in ${OUT_DIR}/server.crt -inkey ${OUT_DIR}/server.key \
 -out ${OUT_DIR}/server.p12 -name ${CN_SERVER_KEY_ALIAS} \
 -passin pass:${PASSWORD} -passout pass:${PASSWORD}

# import PKS12 data into JKS so it could be used by Java based servers like Tomcat out of the box
keytool -importkeystore \
 -srckeystore ${OUT_DIR}/server.p12 -srcstoretype PKCS12 -srcstorepass ${PASSWORD} -alias ${CN_SERVER_KEY_ALIAS} \
 -destkeystore ${OUT_DIR}/serverkeystore.jks -deststorepass ${PASSWORD} -destkeypass ${PASSWORD}

###############################
 
# create client key
openssl genrsa -des3 -out ${OUT_DIR}/client.key -passout pass:${PASSWORD} 4096
 
# create client cert request
openssl req -new -sha256 -key ${OUT_DIR}/client.key -out ${OUT_DIR}/client.csr \
 -passin pass:$PASSWORD -subj "/C=${C}/ST=${ST}/L=${L}/O=${O}/CN=${CN_CLIENT}/"
 
 
# create client cert
openssl x509 -req -days 365 -in ${OUT_DIR}/client.csr -CA ${OUT_DIR}/ca.crt \
 -CAkey ${OUT_DIR}/ca.key -set_serial 02 -out ${OUT_DIR}/client.crt \
 -passin pass:${PASSWORD}
 
# convert client cert to PKCS12, including key
openssl pkcs12 -export -out ${OUT_DIR}/client.p12 -inkey ${OUT_DIR}/client.key \
 -in ${OUT_DIR}/client.crt -passin pass:${PASSWORD} -passout pass:${PASSWORD}

# display artifacts
ls -alrt ${OUT_DIR}/

